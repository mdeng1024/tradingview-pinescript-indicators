//@version=3
// Ehlers Super Passband with FDSO Overbought and Oversold indication
// version: 1.0.0
study("Ehlers Super Passband with Fisherized Deviation Scaled Filter", shorttitle="SPB FDSO")

fastLength = input(title="Fast Length", type=integer, minval=1, defval=40)
slowLength = input(title="Slow Length", type=integer, minval=1, defval=60)
fdsoLength = input(title="FDSO Length", type=integer, minval=1, defval=40)
fdsoLevel = input(title="FDSO Level", type=integer, minval=1, defval=2)
src = input(title="Source", type=source, defval=hl2)
showsignals = input(title="Show Bug/Sell Signals", type=bool, defval=true)

// start FDSO calculation
// prepare super smoother variables
PI = 3.14159
a1 = exp(-1.414 * PI / (0.5 * fdsoLength))
// cos takes radians value, 180 degree = 1 * PI
b1 = 2 * a1 * cos(1.414 * PI / (0.5 * fdsoLength))
c2 = b1
c3 = -a1 * a1
c1 = 1 - c2 - c3

//Produce Nominal zero mean with zeros in the transfer response at
//DC and Nyquist with no spectral distortion
//Nominally whitens the spectrum because of 6 dB per octave rolloff
zeros = src - src[2]

// supersmoother filter
filt = 0.0
filt := c1 * (zeros + zeros[1]) / 2 + c2 * nz(filt[1]) + c3 * nz(filt[2])

// calculate stdev of the filter
std = stdev(filt, fdsoLength)

// rescale filter in terms of stdev
scaledFilt = std != 0? filt/std: 0.0

// apply fisher transform to establish real gaussian probability distribution
// scaledFilt needs to be in the range of -1 to 1 to apply the fisher transformation,
// so the proper way is to transfer scaledFilt to in that range first, but following 
// will show the same result 
fisherFilt = abs(scaledFilt) < 2? 0.5 * log((1 + scaledFilt / 2) / (1 - scaledFilt / 2)) : scaledFilt
	
// color the background of the chart with O/S or O/B indicating
backgroundColour = (fisherFilt > fdsoLevel) ? red : (fisherFilt < -fdsoLevel) ? green :	na
bgcolor(color=backgroundColour, transp=80, title="OverSold or OverBought Coloring")


// start Super Passband calculation
passband(src, fastLength, slowLength) =>
    a1 = 5 / fastLength
    a2 = 5 / slowLength
    
    espf = 0.0
    espf := (a1 - a2) * src +
         (a2 * (1 - a1) - a1 * (1 - a2)) * nz(src[1]) +
         ((1 - a1) + (1 - a2)) * nz(espf[1]) -
         (1 - a1) * (1 - a2) * nz(espf[2])

pb = passband(src, fastLength, slowLength)

// Compute Root Mean Square, alternative to stdev
rms = sqrt(sum(pb * pb, 50) / 50)

spbColor = pb > rms ? #0ebb23 : pb < -rms ? red : #674ea7

plot(rms, title="+RMS", color=#f6b26b, transp=0)
plot(pb, title="Passband", linewidth=2, color=spbColor, transp=0)
plot(-rms, title="-RMS", color=#f6b26b, transp=0)

hline(0, title="Zero Level", linestyle=dotted, color=#989898)

// plot buy/sell signal
// use curvature information to filter out some false positives
mm1 = change(change(pb, 1), 1)
mm2 = change(change(pb, 2), 2)

buysignals = showsignals and crossover(pb, -rms) and mm1 > 0 and mm2 > 0
sellsignals = showsignals and crossunder(pb, rms) and mm1 < 0 and mm2 < 0

plot(buysignals ? -rms[1]*1.2: na, style=circles, color=green, linewidth=3, title="Buy Signal")
plot(sellsignals ? rms[1]*1.2: na, style=circles, color=red, linewidth=3, title="Sell Signal")

// add alter conditions 
alertcondition(buysignals, title="Buy-Signal", message="Super Passband has crossed over bottom line generated BUY signal")
alertcondition(sellsignals, title="Sell-Signal", message="Super Passband has crossed down the top line generated SELL signal")
