//@version=3
// John Ehlers' Cyber Cycle Period from his book
// "Cybernetics Analysis for Stock and Futures"
// implementation based on original code from LazyBear 
// lowpass filter has also been referred as Instantaneous Trendline in John Ehlers' early books
study("John Ehlers' Adaptive LowPass", shorttitle="Adaptive LowPass", overlay=true, precision=3)

src=input(hl2, title="Source") 
a=input(.07, title="Alpha")
sign = input(true, title="Show Trade Signal")

ip = 0.0
p = 0.0

// smooth price data
s = (src + 2*src[1] + 2*src[2] + src[3])/6.0

// prepare cycle
c = 0.0
c := n<7 ? (src - 2*src[1] + src[2])/4.0 : ((1 - 0.5*a)*(1 - 0.5*a)*(s - 2*s[1] + s[2]) + 2*(1-a)* nz(c[1]) - (1 - a)*(1-a)* nz(c[2]))

// start calculating dominant cycle period
q1 = (.0962*c + 0.5769*c[2] - 0.5769*c[4] - .0962*c[6])*(0.5+.08*nz(ip[1]))
I1 = c[3]
dp_ = iff(q1 != 0 and q1[1] != 0, (I1/q1 - I1[1]/q1[1]) / (1 + I1*I1[1]/(q1*q1[1])),0.0)
dp = iff(dp_ < 0.1, 0.1, iff(dp_ > 1.1, 1.1, dp_))

med(x,y,z) => (x+y+z) - min(x,min(y,z)) - max(x,max(y,z))
md = med(dp,dp[1], med(dp[2], dp[3], dp[4]))

dc = iff(md == 0, 15, 6.28318 / md + 0.5)
ip := .33*dc + .67*nz(ip[1])
p := .15*ip + .85*nz(p[1])

// plot(round(p), title="Cycle Period",color=blue)
a1 = 2/(1+p)
lp = 0.0
lp := n < 7? 
 (src + 2 * src[1] + src[2]) / 4
 : (a1-0.25*a1*a1)*src
     + 0.5*a1*a1*src[1]
     - (a1-0.75*a1*a1)*src[2]
     + 2*(1-a1)*nz(lp[1])
     - (1-a1)*(1-a1)*nz(lp[2])
lag = 0.0
lag := 2.0*lp - nz(lp[2])

plot(lp, color=red, linewidth=1, title="LP")
plot(lag, color=blue, linewidth=1, title="LP-Trigger")

// plot reference SMA
plot(sma(src, 50), color=red, linewidth=2, title="SMA50")

// plot range band (fixed Bollinger)
ma = sma(src, 20)
dev = stdev(src, 20)
up = ma + 2 * dev
dn = ma - 2 * dev
upPlot = plot(up, color=#128484, title="BBand-Up")
lowPlot = plot(dn, color=#128484, title="BBand-Low")
fill(upPlot, lowPlot, color=#128484, transp=95)


// plot buy/sell signal
peak(src) =>
    src[2] < src[1] and src[1] > src

valey(src) =>
    src[2] > src[1] and src[1] < src

peaks = sign? peak(lp): false
valleys = sign? valey(lp): false

// add alter conditions 
alertcondition(peaks, title="Buy-Signal", message="Adaptive Lowpass has peaked and generated BUY signal")
alertcondition(valleys, title="Sell-Signal", message="Adaptive Lowpass has valleyed and generated SELL signal")

        
// finding the lowest/highest point to plot the buy/sell indicator
lowPoint = valleys? (dn <= low ? dn - 0.2 * dev : low - 0.2 * dev): 0.0
highPoint = peaks? (up >= high ? up + 0.2 * dev: high + 0.2 * dev): 0.0

plotshape(peaks? highPoint : na, color=red, style=shape.labeldown, location=location.absolute, text="Sell", textcolor=white)
plotshape(valleys? lowPoint : na, color=lime, style=shape.labelup, location=location.absolute, text="Buy", textcolor=black)
